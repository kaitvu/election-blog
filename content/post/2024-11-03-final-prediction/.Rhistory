rename(D_pv2p_lag1 = D_pv2p) |>
mutate(year = 2024)
state_pred_data <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10,
party == "DEM",
year == 2024) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(oct_poll = month_10) |>
mutate(incumbent_party = 0) |>
left_join(lag_24, by = c("state", "year")) |>
drop_na()
# 2024 prediction
final_pred <- predict(state_reg, state_pred_data, interval = "prediction")
final_table <- bind_cols(state_pred_data,
as.data.frame(final_pred) |> rename_with(~paste0("D_", .))) |>
mutate(D_fit = round(D_fit, 2),
D_lwr = round(D_lwr, 2),
D_upr = round(D_upr, 2),
winner = if_else(D_fit>50, "Harris", "Trump")) |>
select(-oct_poll,
-year,
-incumbent_party,
-D_pv2p_lag1) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota", "Nevada", "New Hampshire", "New Mexico", "North Carolina", "Pennsylvania", "Texas", "Virginia", "Wisconsin"))
# table 4: state model prediction
knitr::kable(final_table,
col.names = c("State", "Prediction", "Lower Bound", "Upper Bound", "Winner")) |>
kableExtra::kable_styling(full_width = FALSE) |>
kableExtra::row_spec(row = which(final_table$winner == "Harris"), background = "#D3E5FF") |>
kableExtra::row_spec(row = which(final_table$winner == "Trump"), background = "#FFD1D1")
# figure 4: state prediction intervals
final_table |>
mutate(state = reorder(state, D_fit)) |>
ggplot(aes(x = D_fit, y = state)) +
geom_segment(aes(x = D_lwr, xend = D_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = D_fit), color = "black", size = 3) +
geom_point(aes(x = D_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = D_upr), color = "dodgerblue3", size = 3) +
geom_vline(xintercept = 50, color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "Predicted Democratic Popular Vote Share with Confidence Intervals by State",
x = "Predicted Democratic Vote Share",
y = "State") +
theme_minimal() +
scale_x_continuous(breaks = seq(40, 60, by = 5)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# tidy state-level prediction
pred_map <- expert_24 |>
mutate(winner = if_else(cook_text_rating == "Solid Democrat",
"Harris",
if_else(cook_text_rating == "Solid Republican",
"Trump",
NA_character_))) |>
slice(-c(52:56)) |>
select(state, winner) |>
left_join(final_table |> select(state, winner_final = winner), by = "state") |>
mutate(winner = coalesce(winner, winner_final)) |>
select(state, winner) |>
mutate(winner = if_else(state == "Maine", "Harris", winner))
# figure 5: final predicted electoral map
pred_map |>
left_join(states, by = "state") |>
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = winner), color = "white") +
scale_fill_manual(values = c(
"Harris" = "dodgerblue4",
"Trump" = "firebrick3"
)) +
labs(
title = "Final Predicted Electoral Map",
fill = "Winner"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
legend.key.size = unit(0.8, "cm")
)
# figure 6: state model prediction
ec_table <- pred_map |>
left_join(ec, by = "state") |>
select(state, winner, electors) |>
mutate(winner = case_when(
winner == "Harris" ~ "Kamala Harris",
winner == "Trump" ~ "Donald Trump",
TRUE ~ winner
)) |>
group_by(winner) |>
summarize(count = sum(electors)) |>
arrange(desc(count))
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted Electoral College Votes",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
theme(aspect.ratio = 0.4)
# set seed
set.seed(02171)
# run cross-validation
out_samp_errors_2 <- sapply(1:1000, function(i) {
years_out_samp_2 <- sample(state_model$year, 3)
mod_2 <- lm(D_pv2p ~ D_pv2p_lag1 + oct_poll + incumbent_party,
data = state_model[!(state_model$year %in% years_out_samp_2), ])
out_samp_pred_2 <- predict(mod_2, newdata = state_model[state_model$year %in% years_out_samp_2, ])
if (any(is.na(out_samp_pred_2)) || any(is.na(state_model$D_pv2p[state_model$year %in% years_out_samp_2]))) {
return(NA)
}
out_samp_truth_2 <- state_model$D_pv2p[state_model$year %in% years_out_samp_2]
mean(abs(out_samp_pred_2 - out_samp_truth_2))
})
out_samp_errors_2 <- na.omit(out_samp_errors_2)
mean_out_samp_error_2 <- mean(out_samp_errors_2)
# figure 3: state model out-of-sample errors from cross validation
ggplot() +
geom_histogram(mapping = aes(x = out_samp_errors_2), fill = "#D3D3D3", binwidth = 0.5) +
geom_vline(aes(xintercept = mean_out_samp_error_2), color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "State Model Out-of-Sample Errors from Cross-Validation",
x = "Out-of-Sample Mean Absolute Errors",
y = "Count") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
# build state model
state_model <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10,
party == "DEM",
year >= 2000) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
left_join(d_state_pv, by = c("year", "state")) |>
select(year, state, month_10, D_pv2p, D_pv2p_lag1) |>
drop_na() |>
rename(oct_poll = month_10,
lag_pv2p = D_pv2p_lag1) |>
left_join(d_pv |>
select(year, party, incumbent_party) |>
filter(party == "DEM") |>
mutate(incumbent_party = if_else(incumbent_party == "TRUE", 1, 0)) |>
select(-party), by = "year")
# table 3: state model
state_reg <- lm(D_pv2p ~ D_pv2p_lag1 + oct_poll + incumbent_party,
data = subset(state_model, year <= 2020))
# build state model
state_model <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10,
party == "DEM",
year >= 2000) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
left_join(d_state_pv, by = c("year", "state")) |>
select(year, state, month_10, D_pv2p, D_pv2p_lag1) |>
drop_na() |>
rename(oct_poll = month_10,
lag_pv2p = D_pv2p_lag1) |>
left_join(d_pv |>
select(year, party, incumbent_party) |>
filter(party == "DEM") |>
mutate(incumbent_party = if_else(incumbent_party == "TRUE", 1, 0)) |>
select(-party), by = "year")
# table 3: state model
state_reg <- lm(D_pv2p ~ lag_pv2p + oct_poll + incumbent_party,
data = subset(state_model, year <= 2020))
tab_model(state_reg, show.se = TRUE,
title = "Regression Table for State Model (2000-2020)",
dv.labels = "Democrat's State-Level Popular Vote Share")
View(state_model)
# set seed
set.seed(02171)
# run cross-validation
out_samp_errors_2 <- sapply(1:1000, function(i) {
years_out_samp_2 <- sample(state_model$year, 3)
mod_2 <- lm(D_pv2p ~ D_pv2p_lag1 + oct_poll + incumbent_party,
data = state_model[!(state_model$year %in% years_out_samp_2), ])
out_samp_pred_2 <- predict(mod_2, newdata = state_model[state_model$year %in% years_out_samp_2, ])
if (any(is.na(out_samp_pred_2)) || any(is.na(state_model$D_pv2p[state_model$year %in% years_out_samp_2]))) {
return(NA)
}
out_samp_truth_2 <- state_model$D_pv2p[state_model$year %in% years_out_samp_2]
mean(abs(out_samp_pred_2 - out_samp_truth_2))
})
# set seed
set.seed(02171)
# run cross-validation
out_samp_errors_2 <- sapply(1:1000, function(i) {
years_out_samp_2 <- sample(state_model$year, 3)
mod_2 <- lm(D_pv2p ~ lag_pv2p + oct_poll + incumbent_party,
data = state_model[!(state_model$year %in% years_out_samp_2), ])
out_samp_pred_2 <- predict(mod_2, newdata = state_model[state_model$year %in% years_out_samp_2, ])
if (any(is.na(out_samp_pred_2)) || any(is.na(state_model$D_pv2p[state_model$year %in% years_out_samp_2]))) {
return(NA)
}
out_samp_truth_2 <- state_model$D_pv2p[state_model$year %in% years_out_samp_2]
mean(abs(out_samp_pred_2 - out_samp_truth_2))
})
out_samp_errors_2 <- na.omit(out_samp_errors_2)
mean_out_samp_error_2 <- mean(out_samp_errors_2)
# figure 3: state model out-of-sample errors from cross validation
ggplot() +
geom_histogram(mapping = aes(x = out_samp_errors_2), fill = "#D3D3D3", binwidth = 0.5) +
geom_vline(aes(xintercept = mean_out_samp_error_2), color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "State Model Out-of-Sample Errors from Cross-Validation",
x = "Out-of-Sample Mean Absolute Errors",
y = "Count") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
# state 2024 data
lag_24 <- d_state_pv |>
filter(year == 2020) |>
select(state, D_pv2p) |>
rename(lag_pv2p = D_pv2p) |>
mutate(year = 2024)
state_pred_data <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10,
party == "DEM",
year == 2024) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(oct_poll = month_10) |>
mutate(incumbent_party = 0) |>
left_join(lag_24, by = c("state", "year")) |>
drop_na()
# 2024 prediction
final_pred <- predict(state_reg, state_pred_data, interval = "prediction")
final_table <- bind_cols(state_pred_data,
as.data.frame(final_pred) |> rename_with(~paste0("D_", .))) |>
mutate(D_fit = round(D_fit, 2),
D_lwr = round(D_lwr, 2),
D_upr = round(D_upr, 2),
winner = if_else(D_fit>50, "Harris", "Trump")) |>
select(-oct_poll,
-year,
-incumbent_party,
-lag_pv2p) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota", "Nevada", "New Hampshire", "New Mexico", "North Carolina", "Pennsylvania", "Texas", "Virginia", "Wisconsin"))
# table 4: state model prediction
knitr::kable(final_table,
col.names = c("State", "Prediction", "Lower Bound", "Upper Bound", "Winner")) |>
kableExtra::kable_styling(full_width = FALSE) |>
kableExtra::row_spec(row = which(final_table$winner == "Harris"), background = "#D3E5FF") |>
kableExtra::row_spec(row = which(final_table$winner == "Trump"), background = "#FFD1D1")
# figure 4: state prediction intervals
final_table |>
mutate(state = reorder(state, D_fit)) |>
ggplot(aes(x = D_fit, y = state)) +
geom_segment(aes(x = D_lwr, xend = D_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = D_fit), color = "black", size = 3) +
geom_point(aes(x = D_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = D_upr), color = "dodgerblue3", size = 3) +
geom_vline(xintercept = 50, color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "Predicted Democratic Popular Vote Share with Confidence Intervals by State",
x = "Predicted Democratic Vote Share",
y = "State") +
theme_minimal() +
scale_x_continuous(breaks = seq(40, 60, by = 5)) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# national poll data
nat_poll <- d_pollav_nat |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10) |>
group_by(year, party, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(oct_poll = month_10)
# build national model
nat_model <- d_pv |>
left_join(fred_econ, by = "year") |>
filter(year >= 1968,
incumbent_party) |>
mutate(incumbent = as.numeric(incumbent)) |>
left_join(nat_poll, by = c("year", "party")) |>
left_join(national_party_id, by = c("year", "party"))
# table 1: national model
nat_reg <- lm(pv2p ~ GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = subset(nat_model, year < 2020))
tab_model(nat_reg, show.se = TRUE,
title = "Regression Table for National Model (1968-2016)",
dv.labels = "National Popular Vote Share for Incumbent Party Candidate")
d_pv |>
group_by(party) |>
mutate(pv2p_lag1 = lag(pv2p, 1)
d_pv |>
d_pv |>
group_by(party) |>
mutate(pv2p_lag1 = lag(pv2p, 1))
# national poll data
nat_poll <- d_pollav_nat |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10) |>
group_by(year, party, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(oct_poll = month_10)
# build national model
nat_model <- d_pv |>
group_by(party) |>
mutate(pv2p_lag = lag(pv2p, 1)) |>
left_join(fred_econ, by = "year") |>
filter(year >= 1968,
incumbent_party) |>
mutate(incumbent = as.numeric(incumbent)) |>
left_join(nat_poll, by = c("year", "party")) |>
left_join(national_party_id, by = c("year", "party"))
# table 1: national model
nat_reg <- lm(pv2p ~ pv2p_lag + GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = subset(nat_model, year < 2020))
tab_model(nat_reg, show.se = TRUE,
title = "Regression Table for National Model (1968-2016)",
dv.labels = "National Popular Vote Share for Incumbent Party Candidate")
View(nat_model)
# national 2024 data
nat_pred_data <- nat_model |>
filter(year == 2024) |>
select(pv2p_lag, GDP_growth_quarterly, oct_poll, two_party_percent) |>
mutate(incumbent = 0)
# 2024 prediction
nat_pred <- predict(nat_reg, nat_pred_data, interval = "prediction")
nat_pred <- round(nat_pred, 2)
# table 2: national model prediction
knitr::kable(nat_pred,
col.names = c("Prediction", "Lower Bound", "Upper Bound")) |>
kableExtra::kable_styling(full_width = FALSE)
# set seed
set.seed(02171)
# run cross-validation
out_samp_errors <- sapply(1:1000, function(i) {
years_out_samp <- sample(nat_model$year, 6)
mod <- lm(pv2p ~ pv2p_lag + GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = nat_model[!(nat_model$year %in% years_out_samp), ])
out_samp_pred <- predict(mod, newdata = nat_model[nat_model$year %in% years_out_samp, ])
if (any(is.na(out_samp_pred)) || any(is.na(nat_model$pv2p[nat_model$year %in% years_out_samp]))) {
return(NA)
}
out_samp_truth <- nat_model$pv2p[nat_model$year %in% years_out_samp]
mean(abs(out_samp_pred - out_samp_truth))
})
out_samp_errors <- na.omit(out_samp_errors)
mean_out_samp_error <- mean(out_samp_errors)
# figure 1: natioanl model out-of-sample errors from cross validation
ggplot() +
geom_histogram(mapping = aes(x = out_samp_errors), fill = "#D3D3D3", binwidth = 0.5) +
geom_vline(aes(xintercept = mean_out_samp_error), color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "National Model Out-of-Sample Errors from Cross-Validation",
x = "Out-of-Sample Mean Absolute Errors",
y = "Count") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
# set seed
set.seed(02171)
# run cross-validation
out_samp_errors <- sapply(1:1000, function(i) {
years_out_samp <- sample(nat_model$year, 6)
mod <- lm(pv2p ~ GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = nat_model[!(nat_model$year %in% years_out_samp), ])
out_samp_pred <- predict(mod, newdata = nat_model[nat_model$year %in% years_out_samp, ])
if (any(is.na(out_samp_pred)) || any(is.na(nat_model$pv2p[nat_model$year %in% years_out_samp]))) {
return(NA)
}
out_samp_truth <- nat_model$pv2p[nat_model$year %in% years_out_samp]
mean(abs(out_samp_pred - out_samp_truth))
})
out_samp_errors <- na.omit(out_samp_errors)
mean_out_samp_error <- mean(out_samp_errors)
# figure 1: natioanl model out-of-sample errors from cross validation
ggplot() +
geom_histogram(mapping = aes(x = out_samp_errors), fill = "#D3D3D3", binwidth = 0.5) +
geom_vline(aes(xintercept = mean_out_samp_error), color = "firebrick", linetype = "dashed", size = 1) +
labs(title = "National Model Out-of-Sample Errors from Cross-Validation",
x = "Out-of-Sample Mean Absolute Errors",
y = "Count") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
# national poll data
nat_poll <- d_pollav_nat |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10) |>
group_by(year, party, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(oct_poll = month_10)
# build national model
nat_model <- d_pv |>
left_join(fred_econ, by = "year") |>
filter(year >= 1968,
incumbent_party) |>
mutate(incumbent = as.numeric(incumbent)) |>
left_join(nat_poll, by = c("year", "party")) |>
left_join(national_party_id, by = c("year", "party"))
# table 1: national model
nat_reg <- lm(pv2p ~ GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = subset(nat_model, year < 2020))
tab_model(nat_reg, show.se = TRUE,
title = "Regression Table for National Model (1968-2016)",
dv.labels = "National Popular Vote Share for Incumbent Party Candidate")
# national 2024 data
nat_pred_data <- nat_model |>
filter(year == 2024) |>
select(GDP_growth_quarterly, oct_poll, two_party_percent) |>
mutate(incumbent = 0)
# 2024 prediction
nat_pred <- predict(nat_reg, nat_pred_data, interval = "prediction")
nat_pred <- round(nat_pred, 2)
# table 2: national model prediction
knitr::kable(nat_pred,
col.names = c("Prediction", "Lower Bound", "Upper Bound")) |>
kableExtra::kable_styling(full_width = FALSE)
harris_share <- nat_pred[1, 1]
trump_share <- 100 - harris_share
pv_table <- data.frame(
candidate = c("Kamala Harris", "Donald Trump"),
pv2p = c(harris_share, trump_share))
# figure 2: national model prediction
ggplot(pv_table, aes(x = "", y = pv2p, fill = candidate)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = paste0(pv2p, "%")), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted National Two-Party Popular Vote Share",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
ylim(0, 100) +
theme(aspect.ratio = 0.4)
# build state model
state_model <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 10,
party == "DEM",
year >= 2000) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
left_join(d_state_pv, by = c("year", "state")) |>
select(year, state, month_10, D_pv2p, D_pv2p_lag1) |>
drop_na() |>
rename(oct_poll = month_10,
lag_pv2p = D_pv2p_lag1) |>
left_join(d_pv |>
select(year, party, incumbent_party) |>
filter(party == "DEM") |>
mutate(incumbent_party = if_else(incumbent_party == "TRUE", 1, 0)) |>
select(-party), by = "year")
# table 3: state model
state_reg <- lm(D_pv2p ~ lag_pv2p + oct_poll + incumbent_party,
data = subset(state_model, year <= 2020))
tab_model(state_reg, show.se = TRUE,
title = "Regression Table for State Model (2000-2020)",
dv.labels = "Democrat's State-Level Popular Vote Share")
