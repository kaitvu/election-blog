R_upr = 100 - D_lwr,                      # Calculate upper bound for Republican vote share
margin = abs(D_fit - R_fit),              # Calculate margin for predicted values
margin_lwr = abs(D_lwr - R_upr),          # Calculate margin for lower bounds
margin_upr = abs(D_upr - R_fit)           # Calculate margin for upper bounds
) |>
select(state, margin, margin_lwr, margin_upr) |>
arrange(margin)                            # Sort by the predicted margin
# Incorporate lower and upper bounds into the margin calculation
# Calculate win margins including ranges
w8_table |>
mutate(
R_fit = 100 - D_fit,                     # Predicted Republican vote share
R_lwr = 100 - D_upr,                      # Lower bound for Republican vote share
R_upr = 100 - D_lwr,                      # Upper bound for Republican vote share
margin = D_fit - R_fit,                   # Predicted win margin for Democrats
margin_lwr = D_lwr - R_upr,               # Lower bound for the win margin
margin_upr = D_upr - R_fit                # Upper bound for the win margin
) |>
select(state, margin, margin_lwr, margin_upr) |>
arrange(margin)                            # Sort by the predicted margin
# Display the result
print(w8_table)
# Incorporate lower and upper bounds into the margin calculation
# Calculate win margins including ranges
w8_table |>
mutate(
R_fit = 100 - D_fit,                     # Predicted Republican vote share
R_lwr = 100 - D_upr,                      # Lower bound for Republican vote share
R_upr = 100 - D_lwr,                      # Upper bound for Republican vote share
margin = D_fit - R_fit,                   # Predicted win margin for Democrats
margin_lwr = D_lwr - R_upr,               # Lower bound for the win margin
margin_upr = D_upr - R_fit                # Upper bound for the win margin
) |>
select(state, margin, margin_lwr, margin_upr) |>
arrange(margin)                            # Sort by the predicted margin
# Assuming w8_table has been created as previously described
library(ggplot2)
# Prepare data for plotting
plot_data <- w8_table |>
mutate(state = reorder(state, margin))  # Reorder states by predicted margin
w8_table |>
mutate(R_fit = 100-D_fit,
margin = D_fit - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "gray", size = 2) +  # Range line
geom_point(aes(x = margin), color = "blue", size = 3) +  # Predicted margin
geom_point(aes(x = margin_lwr), color = "red", size = 3, shape = 1) +  # Lower bound
geom_point(aes(x = margin_upr), color = "green", size = 3, shape = 1) +  # Upper bound
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,                     # Predicted Republican vote share
R_lwr = 100 - D_upr,                      # Lower bound for Republican vote share
R_upr = 100 - D_lwr,                      # Upper bound for Republican vote share
margin = D_fit - R_fit,                   # Predicted win margin for Democrats
margin_lwr = D_lwr - R_upr,               # Lower bound for the win margin
margin_upr = D_upr - R_fit
state = reorder(state, margin)) |>
w8_table |>
mutate(R_fit = 100 - D_fit,                     # Predicted Republican vote share
R_lwr = 100 - D_upr,                      # Lower bound for Republican vote share
R_upr = 100 - D_lwr,                      # Upper bound for Republican vote share
margin = D_fit - R_fit,                   # Predicted win margin for Democrats
margin_lwr = D_lwr - R_upr,               # Lower bound for the win margin
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "gray", size = 2) +  # Range line
geom_point(aes(x = margin), color = "blue", size = 3) +  # Predicted margin
geom_point(aes(x = margin_lwr), color = "red", size = 3, shape = 1) +  # Lower bound
geom_point(aes(x = margin_upr), color = "green", size = 3, shape = 1) +  # Upper bound
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_upr,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "gray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3, shape = 1) +
geom_point(aes(x = margin_upr), color = "dodgerblue3"", size = 3, shape = 1) +  # Upper bound
xlab("Margin") +
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_upr,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "gray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3, shape = 1) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3, shape = 1) +  # Upper bound
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_upr,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3, shape = 1) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3, shape = 1) +  # Upper bound
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_upr,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3) +
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_fit,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3) +
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_fit,
margin_upr = D_upr - R_fit,
state = reorder(state, margin))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_fit,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3) +
xlab("Margin") +
ylab("State") +
ggtitle("Predicted Win Margin with Confidence Intervals by State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
set.seed(02171)
out_samp_errors <- sapply(1:1000, function(i) {
years_out_samp <- sample(nat_model$year, 6)
mod <- lm(pv2p ~ GDP_growth_quarterly + oct_poll + two_party_percent + incumbent,
data = nat_model[!(nat_model$year %in% years_out_samp), ])
out_samp_pred <- predict(mod, newdata = nat_model[nat_model$year %in% years_out_samp, ])
out_samp_truth <- nat_model$pv2p[nat_model$year %in% years_out_samp]
mean(abs(out_samp_pred - out_samp_truth))
})
mean_out_samp_error <- mean(out_samp_errors)
ggplot() +
geom_histogram(mapping = aes(x = out_samp_errors), fill = "#9999CC", binwidth = 0.5) +
labs(title = "National Model Out-of-Sample Errors from Cross-Validation",
x = "Out-of-Sample Mean Absolute Errors",
y = "Count") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_fit,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3) +
labs(title = "Predicted Democratic Win Margin with Confidence Intervals by State",
x = "Predicted Democratic Win Margin",
y = "State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
w8_table |>
mutate(R_fit = 100 - D_fit,
R_lwr = 100 - D_upr,
R_upr = 100 - D_lwr,
margin = D_fit - R_fit,
margin_lwr = D_lwr - R_fit,
margin_upr = D_upr - R_fit,
state = reorder(state, margin)) |>
ggplot(aes(x = margin, y = state)) +
geom_segment(aes(x = margin_lwr, xend = margin_upr, yend = state), color = "lightgray", size = 2) +
geom_point(aes(x = margin), color = "black", size = 3) +
geom_point(aes(x = margin_lwr), color = "firebrick3", size = 3) +
geom_point(aes(x = margin_upr), color = "dodgerblue3", size = 3) +
labs(title = "Predicted Democratic Win Margin with Confidence Intervals by State",
x = "Predicted Democratic Win Margin",
y = "State") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# tidy state-level prediction
pred_map <- expert_24 |>
mutate(winner = if_else(cook_text_rating == "Solid Democrat",
"Harris",
if_else(cook_text_rating == "Solid Republican",
"Trump",
NA_character_))) |>
slice(-c(52:56)) |>
select(state, winner) |>
left_join(w8_table |> select(state, winner_w8 = winner), by = "state") |>
mutate(winner = coalesce(winner, winner_w8)) |>
select(state, winner) |>
mutate(winner = if_else(state == "Maine", "Harris", winner))
# figure 5: week 7 predicted electoral map
pred_map |>
left_join(states, by = "state") |>
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = winner), color = "white") +
scale_fill_manual(values = c(
"Harris" = "dodgerblue4",
"Trump" = "firebrick3"
)) +
labs(
title = "Week 8 Predicted Electoral Map",
fill = "Winner"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
legend.title = element_text(size = 11),
legend.text = element_text(size = 11),
legend.key.size = unit(0.8, "cm")
)
ec_table <- pred_map |>
left_join(ec, by = "state") |>
select(state, winner, electors) |>
mutate(winner = case_when(
winner == "Harris" ~ "Kamala Harris",
winner == "Trump" ~ "Donald Trump",
TRUE ~ winner
)) |>
group_by(winner) |>
summarize(count = sum(electors)) |>
arrange(desc(count))
# table 7: week 7 predicted electoral table
knitr::kable(ec_table,
col.names = c("Candidate", "Electoral College Votes")) |>
kableExtra::kable_styling(full_width = FALSE)
View(ec_table)
ggplot(pv_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = paste0(count, "%")), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted National Two-Party Popular Vote Share",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
ylim(0, 100) +
theme(aspect.ratio = 0.4)
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = paste0(count, "%")), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted National Two-Party Popular Vote Share",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
ylim(0, 100) +
theme(aspect.ratio = 0.4)
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = paste0(count, "%")), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted National Two-Party Popular Vote Share",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
ylim(0, 100) +
theme(aspect.ratio = 0.4)
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted Electoral College Votes",
x = NULL,
y = "Electoral Votes",
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
scale_y_continuous(limits = c(0, max(ec_table$count) + 10)) +  # Adjust limit to max count
theme(aspect.ratio = 0.4)
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted Electoral College Votes",
x = NULL,
y = "Electoral Votes",
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
scale_y_continuous(limits = c(0, max(ec_table$count) + 10)) +  # Adjust limit to max count
theme(aspect.ratio = 0.4)
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted Electoral College Votes",
x = NULL,
y = "Electoral Votes",
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
theme(aspect.ratio = 0.4)
harris_share <- nat_pred[1, 1]
trump_share <- 100 - harris_share
pv_table <- data.frame(
candidate = c("Kamala Harris", "Donald Trump"),
pv2p = c(harris_share, trump_share)
ggplot(pv_table, aes(x = "", y = pv2p, fill = candidate)) +
harris_share <- nat_pred[1, 1]
trump_share <- 100 - harris_share
pv_table <- data.frame(
candidate = c("Kamala Harris", "Donald Trump"),
pv2p = c(harris_share, trump_share)
ggplot(pv_table, aes(x = "", y = pv2p, fill = candidate)) +
harris_share <- nat_pred[1, 1]
trump_share <- 100 - harris_share
pv_table <- data.frame(
candidate = c("Kamala Harris", "Donald Trump"),
pv2p = c(harris_share, trump_share)
ggplot(pv_table, aes(x = "", y = pv2p, fill = candidate)) +
harris_share <- nat_pred[1, 1]
trump_share <- 100 - harris_share
pv_table <- data.frame(
candidate = c("Kamala Harris", "Donald Trump"),
pv2p = c(harris_share, trump_share))
ggplot(pv_table, aes(x = "", y = pv2p, fill = candidate)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 50, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = paste0(pv2p, "%")), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted National Two-Party Popular Vote Share",
x = NULL,
y = NULL,
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
ylim(0, 100) +
theme(aspect.ratio = 0.4)
ec_table <- pred_map |>
left_join(ec, by = "state") |>
select(state, winner, electors) |>
mutate(winner = case_when(
winner == "Harris" ~ "Kamala Harris",
winner == "Trump" ~ "Donald Trump",
TRUE ~ winner
)) |>
group_by(winner) |>
summarize(count = sum(electors)) |>
arrange(desc(count))
ggplot(ec_table, aes(x = "", y = count, fill = winner)) +
geom_bar(stat = "identity", width = 0.3) +
geom_hline(yintercept = 270, linetype = "dashed", color = "black", size = 1) +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), color = "white") +
scale_fill_manual(values = c("Kamala Harris" = "dodgerblue3", "Donald Trump" = "firebrick3")) +
labs(title = "Predicted Electoral College Votes",
x = NULL,
y = "Electoral Votes",
fill = "Candidate") +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2),
plot.margin = margin(10, 10, 10, 10)
) +
coord_flip() +
theme(aspect.ratio = 0.4)
