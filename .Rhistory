# import ads data
ad_campaigns <- read_csv("ad_campaigns_2000-2012.csv")
ad_creative <- read_csv("ad_creative_2000-2012.csv")
ads_2020 <- read_csv("ads_2020.csv")
campaign_spending <- read_csv("FEC_contributions_by_state_2008_2024.csv")
# plot 1: ad spending by month (2000-2012)
ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
filter(year %in% c(2000, 2004, 2008, 2012), month > 7, month < 11) |>
group_by(cycle, air_date, party) |>
summarise(total_cost = sum(total_cost)) |>
mutate(air_date = as.Date(air_date)) |>
ggplot(aes(x = air_date, y = total_cost, color = party)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
scale_y_continuous(labels = dollar_format()) +
scale_color_manual(values = c("dodgerblue3", "firebrick3"), name = "Party") +
geom_line() + geom_point(size = 0.5) +
facet_wrap(cycle ~ ., scales = "free") +
xlab("") + ylab("Ad Spend") +
labs(title = "Ad Spending by Month (2000-2012)") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 11),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 3),
panel.spacing = unit(1.5, "lines"))
# tidy ad data
state_ads <- ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
mutate(state = state.name[match(state, state.abb)]) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin"),
month >= 8,
year %in% c(2004, 2008, 2012)) |>
select(party, state, total_cost, year) |>
group_by(state, year, party) |>
summarize(total_cost = sum(total_cost), .groups = 'drop') |>
group_by(state, year) |>
mutate(spending_winner = ifelse(total_cost == max(total_cost), party, NA)) |>
summarize(spending_winner = first(na.omit(spending_winner)), .groups = 'drop') |>
left_join(d_state_pv |> filter(year %in% c(2004, 2008, 2012)), by = c("state", "year")) |>
mutate(winner = if_else(D_pv2p > R_pv2p, "Democrat", "Republican"),
spending_winner = str_to_title(spending_winner),
match = if_else(winner == spending_winner, "Yes", "No"),) |>
select(state, year, spending_winner, winner, match) |>
pivot_wider(names_from = year,
values_from = c(spending_winner, winner, match)) |>
select(
state,
spending_winner_2004,
match_2004,
spending_winner_2008,
match_2008,
spending_winner_2012,
match_2012
)
# table 1: matching state spending advantage and winner (2004-2012)
knitr::kable(state_ads,
col.names = c("State", "Spending Advantage", "Match",
"Spending Advantage", "Match",
"Spending Advantage", "Match"),
align = c("l", rep("l", ncol(state_ads) - 1))) |>
add_header_above(c(" " = 1, "2004" = 2, "2008" = 2, "2012" = 2)) |>
kableExtra::kable_styling(full_width = FALSE) |>
column_spec(3, background = ifelse(state_ads$match_2004 == "Yes", "#A8E6CF", "#FFD1D1")) |>
column_spec(5, background = ifelse(state_ads$match_2008 == "Yes", "#A8E6CF", "#FFD1D1")) |>
column_spec(7, background = ifelse(state_ads$match_2012 == "Yes", "#A8E6CF", "#FFD1D1"))
ads_2020_table <- ads_2020 |>
rename(state_abb = state) |>
left_join(state_abb_xwalk, by = "state_abb") |>
select(-state_abb) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin")) |>
group_by(state) |>
summarize(biden_airings = sum(biden_airings),
trump_airings = sum(trump_airings),
total_cost = sum(total_cost), .groups = 'drop') |>
arrange(desc(total_cost)) |>
left_join(d_state_pv |> filter(year==2020), by = "state") |>
mutate(state_winner = if_else(D_pv2p>R_pv2p, "Biden", "Trump"),
airings_winner = if_else(biden_airings>trump_airings, "Biden", "Trump")) |>
select(state, biden_airings, trump_airings, total_cost, airings_winner, state_winner)
# table 2: state ads 2020
knitr::kable(ads_2020_table,
col.names = c("State", "Biden Airings", "Trump Airings", "Total Cost", "Air Advantage", "State Winner")) |>
kableExtra::kable_styling(full_width = FALSE)
# plot 2: ad costs by state
ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
mutate(state = state.name[match(state, state.abb)]) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin"),
month >= 4,
month <= 9,
year %in% c(2000, 2004, 2008, 2012)) |>
group_by(state, year) |>
summarize(total_cost_sum = sum(total_cost, na.rm = TRUE), .groups = "drop") |>
bind_rows(ads_2020_table |>
select(state, total_cost) |>
mutate(year = 2020) |>
rename(total_cost_sum = total_cost)) |>
ggplot(aes(x = factor(year, levels = c(2000, 2004, 2008, 2012, 2020)),
y = total_cost_sum,
color = state,
group = state)) +
geom_line() +
geom_point() +
scale_x_discrete(breaks = c("2000", "2004", "2008", "2012", "2020")) +
labs(title = "Total Costs of Ad Campaigns (April-September) by State & Year",
x = "Year",
y = "Total Cost (USD)",
color = "State") +
theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 11),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 3))
# sept poll data
poll <- d_pollav_nat |>
select(year, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 9) |>
group_by(year, party) |>
summarize(sept_poll = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE),2)) |>
left_join(d_pv, by = c("year", "party")) |>
select(year, party, sept_poll)
# build national model
nat_model <- d_pv |>
left_join(fred_econ, by = "year") |>
filter(year >= 1968,
incumbent_party) |>
mutate(incumbent = as.numeric(incumbent)) |>
left_join(poll, by = c("year", "party")) |>
left_join(national_party_id, by = c("year", "party"))
# table 3: national regression model
nat_reg <- lm(pv2p ~ GDP_growth_quarterly + RDPI_growth_quarterly + sept_poll + two_party_percent + incumbent,
data = subset(nat_model, year < 2020))
tab_model(nat_reg, show.se = TRUE,
title = "Regression Table for Combined Model (2000-2016)",
dv.labels = "National Popular Vote Share for Incumbent Party Candidate")
# econ 2024 data
econ_24 <- fred_econ |>
filter(year == 2024) |>
select(year, GDP_growth_quarterly, RDPI_growth_quarterly)
# polling 2024 data
poll_24 <- d_pollav_nat |>
filter(month(poll_date) == 9,
year == 2024,
party == "DEM") |>
group_by(year) |>
summarize(sept_poll = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE),2))
# party id data
party_24 <- national_party_id |>
filter(year == 2024,
party == "DEM") |>
select(year, two_party_percent)
pred_data <- left_join(econ_24, poll_24, by = "year") |>
mutate(incumbent = 0) |>
left_join(party_24, by = "year")
# 2024 prediction
nat_pred <- predict(nat_reg, pred_data, interval = "prediction")
nat_pred <- round(nat_reg, 2)
nat_pred <- predict(nat_reg, pred_data, interval = "prediction")
nat_pred <- round(nat_reg, 2)
# econ 2024 data
econ_24 <- fred_econ |>
filter(year == 2024) |>
select(year, GDP_growth_quarterly, RDPI_growth_quarterly)
# polling 2024 data
poll_24 <- d_pollav_nat |>
filter(month(poll_date) == 9,
year == 2024,
party == "DEM") |>
group_by(year) |>
summarize(sept_poll = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE),2))
# party id data
party_24 <- national_party_id |>
filter(year == 2024,
party == "DEM") |>
select(year, two_party_percent)
pred_data <- left_join(econ_24, poll_24, by = "year") |>
mutate(incumbent = 0) |>
left_join(party_24, by = "year")
# 2024 prediction
nat_pred <- predict(nat_reg, pred_data, interval = "prediction")
nat_pred <- round(nat_pred, 2)
# table 4: national model prediction
knitr::kable(nat_pred,
col.names = c("Prediction", "Lower Bound", "Upper Bound")) |>
kableExtra::kable_styling(full_width = FALSE)
# hide code
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, error = FALSE)
# import libraries
library(car)
library(caret)
library(CVXR)
library(glmnet)
library(tidyverse)
library(patchwork)
library(knitr)
library(sjPlot)
library(kableExtra)
library(maps)
library(readr)
library(stringr)
library(readxl)
library(scales)
# import data
d_pollav_nat <- read_csv("national_polls_1968-2024.csv")
d_pollav_state <- read_csv("state_polls_1968-2024.csv")
fred_econ <- read_csv("fred_econ.csv") |>
filter(quarter == 2)
d_pv <- read_csv("popvote_1948_2020.csv")
d_pv$party[d_pv$party == "democrat"] <- "DEM"
d_pv$party[d_pv$party == "republican"] <- "REP"
d_state_pv <- read_csv("state_popvote_1948_2020.csv")
d_state_pv <- d_state_pv |>
select(year, state, D_pv2p) |>
mutate(R_pv2p = 100-D_pv2p)
states <- map_data("state") |>
rename(state = region)
states$state <- str_to_title(states$state)
ec <- read_csv("corrected_ec_1948_2024.csv")
ec <- ec |>
filter(year == 2024)
expert_24 <- read_excel("expert_2024.xlsx")
national_party_id <- read_csv("national_party_id.csv")
national_party_id$party[national_party_id$party == "democrat"] <- "DEM"
national_party_id$party[national_party_id$party == "republican"] <- "REP"
state_abb_xwalk <- d_state_pv |>
mutate(state_abb = state.abb[match(d_state_pv$state, state.name)]) |>
select(state, state_abb) |>
distinct()
state_abb_xwalk[51,]$state <- "District of Columbia"
state_abb_xwalk[51,]$state_abb <- "DC"
# import ads data
ad_campaigns <- read_csv("ad_campaigns_2000-2012.csv")
ad_creative <- read_csv("ad_creative_2000-2012.csv")
ads_2020 <- read_csv("ads_2020.csv")
campaign_spending <- read_csv("FEC_contributions_by_state_2008_2024.csv")
# plot 1: ad spending by month (2000-2012)
ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
filter(year %in% c(2000, 2004, 2008, 2012), month > 7, month < 11) |>
group_by(cycle, air_date, party) |>
summarise(total_cost = sum(total_cost)) |>
mutate(air_date = as.Date(air_date)) |>
ggplot(aes(x = air_date, y = total_cost, color = party)) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
scale_y_continuous(labels = dollar_format()) +
scale_color_manual(values = c("dodgerblue3", "firebrick3"), name = "Party") +
geom_line() + geom_point(size = 0.5) +
facet_wrap(cycle ~ ., scales = "free") +
xlab("") + ylab("Ad Spend") +
labs(title = "Ad Spending by Month (2000-2012)") +
theme_bw() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 11),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 3),
panel.spacing = unit(1.5, "lines"))
# tidy ad data
state_ads <- ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
mutate(state = state.name[match(state, state.abb)]) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin"),
month >= 8,
year %in% c(2004, 2008, 2012)) |>
select(party, state, total_cost, year) |>
group_by(state, year, party) |>
summarize(total_cost = sum(total_cost), .groups = 'drop') |>
group_by(state, year) |>
mutate(spending_winner = ifelse(total_cost == max(total_cost), party, NA)) |>
summarize(spending_winner = first(na.omit(spending_winner)), .groups = 'drop') |>
left_join(d_state_pv |> filter(year %in% c(2004, 2008, 2012)), by = c("state", "year")) |>
mutate(winner = if_else(D_pv2p > R_pv2p, "Democrat", "Republican"),
spending_winner = str_to_title(spending_winner),
match = if_else(winner == spending_winner, "Yes", "No"),) |>
select(state, year, spending_winner, winner, match) |>
pivot_wider(names_from = year,
values_from = c(spending_winner, winner, match)) |>
select(
state,
spending_winner_2004,
match_2004,
spending_winner_2008,
match_2008,
spending_winner_2012,
match_2012
)
# table 1: matching state spending advantage and winner (2004-2012)
knitr::kable(state_ads,
col.names = c("State", "Spending Advantage", "Match",
"Spending Advantage", "Match",
"Spending Advantage", "Match"),
align = c("l", rep("l", ncol(state_ads) - 1))) |>
add_header_above(c(" " = 1, "2004" = 2, "2008" = 2, "2012" = 2)) |>
kableExtra::kable_styling(full_width = FALSE) |>
column_spec(3, background = ifelse(state_ads$match_2004 == "Yes", "#A8E6CF", "#FFD1D1")) |>
column_spec(5, background = ifelse(state_ads$match_2008 == "Yes", "#A8E6CF", "#FFD1D1")) |>
column_spec(7, background = ifelse(state_ads$match_2012 == "Yes", "#A8E6CF", "#FFD1D1"))
ads_2020_table <- ads_2020 |>
rename(state_abb = state) |>
left_join(state_abb_xwalk, by = "state_abb") |>
select(-state_abb) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin")) |>
group_by(state) |>
summarize(biden_airings = sum(biden_airings),
trump_airings = sum(trump_airings),
total_cost = sum(total_cost), .groups = 'drop') |>
arrange(desc(total_cost)) |>
left_join(d_state_pv |> filter(year==2020), by = "state") |>
mutate(state_winner = if_else(D_pv2p>R_pv2p, "Biden", "Trump"),
airings_winner = if_else(biden_airings>trump_airings, "Biden", "Trump")) |>
select(state, biden_airings, trump_airings, total_cost, airings_winner, state_winner)
# table 2: state ads 2020
knitr::kable(ads_2020_table,
col.names = c("State", "Biden Airings", "Trump Airings", "Total Cost", "Air Advantage", "State Winner")) |>
kableExtra::kable_styling(full_width = FALSE)
# plot 2: ad costs by state
ad_campaigns |>
mutate(year = as.numeric(substr(air_date, 1, 4))) |>
mutate(month = as.numeric(substr(air_date, 6, 7))) |>
mutate(state = state.name[match(state, state.abb)]) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota",
"Nevada", "New Hampshire", "New Mexico", "North Carolina",
"Pennsylvania", "Texas", "Virginia", "Wisconsin"),
month >= 4,
month <= 9,
year %in% c(2000, 2004, 2008, 2012)) |>
group_by(state, year) |>
summarize(total_cost_sum = sum(total_cost, na.rm = TRUE), .groups = "drop") |>
bind_rows(ads_2020_table |>
select(state, total_cost) |>
mutate(year = 2020) |>
rename(total_cost_sum = total_cost)) |>
ggplot(aes(x = factor(year, levels = c(2000, 2004, 2008, 2012, 2020)),
y = total_cost_sum,
color = state,
group = state)) +
geom_line() +
geom_point() +
scale_x_discrete(breaks = c("2000", "2004", "2008", "2012", "2020")) +
labs(title = "Total Costs of Ad Campaigns (April-September) by State & Year",
x = "Year",
y = "Total Cost (USD)",
color = "State") +
theme_minimal() +
theme(axis.title = element_text(size = 14),
axis.text = element_text(size = 11),
strip.text.x = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 3))
# sept poll data
poll <- d_pollav_nat |>
select(year, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) == 9) |>
group_by(year, party) |>
summarize(sept_poll = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE),2)) |>
left_join(d_pv, by = c("year", "party")) |>
select(year, party, sept_poll)
# build national model
nat_model <- d_pv |>
left_join(fred_econ, by = "year") |>
filter(year >= 1968,
incumbent_party) |>
mutate(incumbent = as.numeric(incumbent)) |>
left_join(poll, by = c("year", "party")) |>
left_join(national_party_id, by = c("year", "party"))
# table 3: national regression model
nat_reg <- lm(pv2p ~ GDP_growth_quarterly + RDPI_growth_quarterly + sept_poll + two_party_percent + incumbent,
data = subset(nat_model, year < 2020))
tab_model(nat_reg, show.se = TRUE,
title = "Regression Table for Combined Model (2000-2016)",
dv.labels = "National Popular Vote Share for Incumbent Party Candidate")
# econ 2024 data
econ_24 <- fred_econ |>
filter(year == 2024) |>
select(year, GDP_growth_quarterly, RDPI_growth_quarterly)
# polling 2024 data
poll_24 <- d_pollav_nat |>
filter(month(poll_date) == 9,
year == 2024,
party == "DEM") |>
group_by(year) |>
summarize(sept_poll = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE),2))
# party id data
party_24 <- national_party_id |>
filter(year == 2024,
party == "DEM") |>
select(year, two_party_percent)
pred_data <- left_join(econ_24, poll_24, by = "year") |>
mutate(incumbent = 0) |>
left_join(party_24, by = "year")
# 2024 prediction
nat_pred <- predict(nat_reg, pred_data, interval = "prediction")
nat_pred <- round(nat_pred, 2)
# table 4: national model prediction
knitr::kable(nat_pred,
col.names = c("Prediction", "Lower Bound", "Upper Bound")) |>
kableExtra::kable_styling(full_width = FALSE)
# build state model
state_model <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) %in% c(9, 10),
party == "DEM",
year >= 2000) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
left_join(d_state_pv, by = c("year", "state")) |>
select(year, state, month_9, month_10, D_pv2p) |>
drop_na() |>
rename(sept_poll = month_9,
oct_poll = month_10)
state_reg <- lm(D_pv2p ~ sept_poll + oct_poll,
data = state_model)
# table 5: state regression model
tab_model(state_reg, show.se = TRUE,
title = "Regression Table for State Model (2000-2020)",
dv.labels = "Democrat's State-Level Popular Vote Share")
# state polling 2024 data
state_poll_24 <- d_pollav_state |>
select(year, state, weeks_left, poll_date, poll_support, party) |>
filter(month(poll_date) %in% c(9, 10),
party == "DEM",
year == 2024) |>
group_by(year, state, month = month(poll_date)) |>
summarize(poll_support = round(weighted.mean(poll_support, weeks_left, na.rm = TRUE), 2), .groups = "drop") |>
pivot_wider(names_from = month,
values_from = poll_support,
names_prefix = "month_") |>
drop_na() |>
rename(sept_poll = month_9,
oct_poll = month_10)
# 2024 prediction
w6_pred <- predict(state_reg, state_poll_24, interval = "prediction")
w6_table <- bind_cols(state_poll_24,
as.data.frame(w6_pred) |> rename_with(~paste0("D_", .))) |>
mutate(D_fit = round(D_fit, 2),
D_lwr = round(D_lwr, 2),
D_upr = round(D_upr, 2),
winner = if_else(D_fit>50, "Harris", "Trump")) |>
select(-sept_poll,
-oct_poll,
-year) |>
filter(state %in% c("Arizona", "Florida", "Georgia", "Michigan", "Minnesota", "Nevada", "New Hampshire", "New Mexico", "North Carolina", "Pennsylvania", "Texas", "Virginia", "Wisconsin"))
# table 6: state model prediction
knitr::kable(w6_table,
col.names = c("State", "Prediction", "Lower Bound", "Upper Bound", "Winner")) |>
kableExtra::kable_styling(full_width = FALSE) |>
kableExtra::row_spec(row = which(w6_table$winner == "Harris"), background = "#D3E5FF") |>
kableExtra::row_spec(row = which(w6_table$winner == "Trump"), background = "#FFD1D1")
# tidy state-level prediction
pred_map <- expert_24 |>
mutate(winner = if_else(cook_text_rating == "Solid Democrat",
"Harris",
if_else(cook_text_rating == "Solid Republican",
"Trump",
NA_character_))) |>
slice(-c(52:56)) |>
select(state, winner) |>
left_join(w6_table |> select(state, winner_w6 = winner), by = "state") |>
mutate(winner = coalesce(winner, winner_w6)) |>
select(state, winner) |>
mutate(winner = if_else(state == "Maine", "Harris", winner))
# figure 3: week 6 predicted electoral map
pred_map |>
left_join(states, by = "state") |>
ggplot(aes(long, lat, group = group)) +
geom_polygon(aes(fill = winner), color = "white") +
scale_fill_manual(values = c(
"Harris" = "dodgerblue4",
"Trump" = "firebrick3"
)) +
labs(
title = "Week 6 Predicted Electoral Map",
fill = "Winner"
) +
theme_void() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 14, vjust = 2)
)
ec_table <- pred_map |>
left_join(ec, by = "state") |>
select(state, winner, electors) |>
group_by(winner) |>
summarize(count=sum(electors))
# table 7: week 6 predicted electoral table
knitr::kable(ec_table,
col.names = c("Candidate", "Electoral College Votes")) |>
kableExtra::kable_styling(full_width = FALSE)
